<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.companion.mapper.GoodsMapper">
    <select id="incomingAndGoodsAutoNum" resultType="string">
        select
        concat(#{sep}, coalesce(max(substr(${columnName},${seq}))::integer, 1000000) +1 )
        from ${tableName}
    </select>

    <sql id = "goodsColumnBase">
        goods_Num, goods_name, goods_price, goods_content, delivery_cost, emp_num,
        goods_regist, goods_main_store, goods_main_store_img, goods_images,
        goods_images_img, visit_count, update_Emp_Num, goods_Update_Date
    </sql>

    <insert id="goodsInsert" parameterType="com.example.companion.command.GoodsCommand">
        insert into goods(<include refid="goodsColumnBase"/>)
        values(#{goodsNum}, #{goodsName}, #{goodsPrice}, #{goodsContent}, #{deliveryCost}, #{empNum}, now(),
                #{goodsMainStore}, #{goodsMainStoreImg}
        <!-- 이미지가 있는 경우에만 저장 -->
                <if test="goodsImages != null">, #{goodsImages}, #{goodsImagesImg}</if>
                <if test="goodsImages == null">,null,null</if>
                ,0,null,null)
    </insert>

    <select id="allSelect" resultType="com.example.companion.domain.GoodsDTO" >
        select * from(
            select ROW_NUMBER() over (order by goods_num desc) as rn,
                goods_Num goodsNum, goods_name goodsName, goods_price goodsPrice
                ,goods_content goodsContent, delivery_cost deliveryCost, emp_num empNum
                ,goods_regist goodsRegist, goods_main_store goodsMainStore
                ,goods_main_store_img goodsMainStoreImg, goods_images goodsImages
                ,goods_images_img goodsImagesImg, visit_count visitCount
                ,update_Emp_Num updateEmpNum, goods_Update_Date goodsUpdateDate
            from goods
            <where>
                <if test="searchWord != null">
                    goods_name like '%' || #{searchWord} || '%'
                    or goods_num like '%' || #{searchWord} || '%'
                </if>
            </where>
        )sub1
        where rn between #{startRow} and #{endRow}
    </select>

    <select id="goodsCount" parameterType="string" resultType="integer">
        select count(*) from goods
        <where>
            <if test="searchWord != null">
                goods_name like '%' || #{searchWord} || '%'
                or goods_num like '%' || #{searchWord} || '%'
            </if>
        </where>
    </select>

    <delete id="productsDelete" parameterType="string">
        delete from goods
        where goods_num in <foreach collection="products" item="goodsNum" open="(" close=")" index="index"
                            separator=",">
                                #{goodsNum}
                            </foreach>
    </delete>
    
    <resultMap id="goodsResultMap" type="com.example.companion.domain.GoodsDTO">

        <constructor>
            <idArg column="goods_Num" javaType="string"/>
            <arg column="goods_Name" javaType="string" />
            <arg column="goods_Price" javaType="integer" />
            <arg column="delivery_Cost" javaType="integer" />
            <arg column="goods_Content" javaType="string" />
            <arg column="emp_Num" javaType="string" />
            <arg column="visit_Count" javaType="integer" />
            <arg column="goods_Regist" javaType="java.util.Date" />
            <arg column="update_Emp_Num" javaType="string" />
            <arg column="goods_Update_Date" javaType="java.util.Date" />
            <arg column="goods_main_store" javaType="string" />
            <arg column="goods_main_store_img" javaType="string" />
            <arg column="goods_images" javaType="string" />
            <arg column="goods_images_img" javaType="string" />

        </constructor>

        <!-- id는 primary칼럼, results는 일반칼럼, property는 dto에 있는 해당 테이블 칼럼의 멤버필드 -->
        <!--
        <id column="goods_Num" jdbcType="VARCHAR" property="goodsNum"/>
        <result column="goods_name" jdbcType="VARCHAR" property="goodsName"/>
        <result column="goods_price" jdbcType="BIGINT" property="goodsPrice"/>
        <result column="goods_content" jdbcType="VARCHAR" property="goodsContent"/>
        <result column="delivery_cost" jdbcType="BIGINT" property="deliveryCost"/>
        <result column="emp_num" jdbcType="VARCHAR" property="empNum"/>
        <result column="goods_regist" jdbcType="DATE" property="goodsRegist"/>

        <result column="goods_main_store" jdbcType="VARCHAR" property="goodsMainStore"/>
        <result column="goods_main_store_img" jdbcType="VARCHAR" property="goodsMainStoreImg"/>
        <result column="goods_images" jdbcType="VARCHAR" property="goodsImages"/>
        <result column="goods_images_img" jdbcType="VARCHAR" property="goodsImagesImg"/>

        <result column="visit_count" jdbcType="BIGINT" property="visitCount"/>
        <result column="update_Emp_Num" jdbcType="VARCHAR" property="updateEmpNum"/>
        <result column="goods_Update_Date" jdbcType="DATE" property="goodsUpdateDate"/>
    -->
    </resultMap>
    <select id="selectOne" parameterType="string" resultMap="goodsResultMap">
        select <include refid="goodsColumnBase"/>
        from goods
        where goods_Num = #{goodsNum}
    </select>

    <update id="goodsUpdate" parameterType="com.example.companion.domain.GoodsDTO">
        update goods
        set GOODS_NAME = #{goodsName}, GOODS_PRICE = #{goodsPrice},
            delivery_cost = #{deliveryCost}, GOODS_CONTENT = #{goodsContent},
            update_emp_num = #{updateEmpNum}, goods_update_date = now()
        <!-- 수정할 파일 정보 추가 -->
        <if test="goodsMainStore != null">
            ,goods_main_store = #{goodsMainStore}
            ,goods_main_store_img = #{goodsMainStoreImg}
        </if>
        <if test=" goodsImages != null">
            ,goods_images = #{goodsImages}
            ,goods_images_img = #{goodsImagesImg}
        </if>
        where goods_num = #{goodsNum}
    </update>

    <delete id="goodsDelete" parameterType="string">
        delete from goods
        where goods_num = #{goodsNum}
    </delete>
</mapper>