<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.companion.mapper.EmployeeMapper">
    <sql id="employeeBaseColumns">
        EMP_NUM, EMP_ID, EMP_PW, EMP_NAME, EMP_ADDR, EMP_ADDR_detail, EMP_POST,
        emp_enter_date, EMP_PHONE, EMP_EMAIL, EMP_ssn
    </sql>
    <select id="autoNum" resultType="string">
        select concat('emp' , coalesce(max(substr(emp_num,4)::Integer),100000) + 1)
        from employees
        <!-- 회원번호 가져오기에서 .mem대신 emp로 대체 -->
    </select>
    <insert id="employeeInsert" parameterType="com.example.companion.domain.EmployeeDTO">
        insert into employees( <include refid="employeeBaseColumns"/>)
        values( #{empNum}, #{empId}, #{empPw}, #{empName}, #{empAddr}
        ,#{empAddrDetail}, #{empPost}
        ,now(), #{empPhone}, #{empEmail}, #{empSsn}
        )
    </insert>
<!-- select한 데이터를 EmployeeDTO로 받아오려면 컬럼명을 EmployeeDTO에 있는 멤버필드명으로 별칭설정
     현재 include를 사용하므로 별칭 설정 X
     -> resultMap을 사용하여 설정
 -->
    <resultMap type="com.example.companion.domain.EmployeeDTO" id="employeeResultMap">
        <id column="emp_num" jdbcType="VARCHAR" property="empNum" />
        <result column="emp_id" jdbcType="VARCHAR" property="empId"/>
        <result column="EMP_PW" jdbcType="VARCHAR" property="empPw"/>
        <result column="EMP_NAME" jdbcType="VARCHAR" property="empName"/>
        <result column="EMP_ADDR" jdbcType="VARCHAR" property="empAddr"/>
        <result column="EMP_ADDR_detail" jdbcType="VARCHAR" property="empAddrDetail"/>
        <result column="EMP_POST" jdbcType="VARCHAR" property="empPost"/>
        <result column="emp_enter_date" jdbcType="DATE" property="empRegiDate"/>
        <result column="EMP_PHONE" jdbcType="VARCHAR" property="empPhone"/>
        <result column="EMP_EMAIL" jdbcType="VARCHAR" property="empEmail"/>
        <result column="EMP_ssn" jdbcType="VARCHAR" property="empSsn"/>
    </resultMap>

    <select id="employeeAllSelect" resultMap="employeeResultMap">
        select <include refid="employeeBaseColumns"/>
        from employees
    </select>

    <select id="employeeCount" parameterType="string" resultType="integer">
        select count(*) from employees
        <if test='searchWord != null'>
            <where>
                emp_NAME like '%' || #{searchWord} || '%'
                or emp_id like '%' || #{searchWord} || '%'
                or emp_num like '%' || #{searchWord} || '%'
            </where>
        </if>
    </select>

    <delete id="employeesDelete" parameterType="string">
        delete from employees where EMP_NUM in
        <foreach collection="employeesNum" item="employeeNum" close=")" open="(" separator="," index="index" >
            #{employeeNum}

        </foreach>
    </delete>

    <select id="employeeOneSelect" parameterType="string" resultMap="employeeResultMap">
        select <include refid="employeeBaseColumns"/>
        from employees
        where EMP_NUM = #{empNum}
    </select>

    <update id="employeeUpdate" parameterType="com.example.companion.domain.EmployeeDTO">
        update employees
        set EMP_NAME = #{empName},
            EMP_ADDR = #{empAddr}
            <if test="empAddrDetail != null">,
                EMP_ADDR_detail = #{empAddrDetail}
            </if>,
            EMP_POST = #{empPost},
            EMP_PHONE = #{empPhone},
            emp_ssn = #{empSsn},
            emp_enter_date = #{empRegiDate}
        where EMP_NUM = #{empNum}

    </update>

    <delete id="employeeDelete" parameterType="string">
        delete from employees
        where EMP_NUM = #{empNum}
    </delete>

</mapper>